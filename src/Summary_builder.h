#ifndef SUMMARY_BUILDER_H
#define SUMMARY_BUILDER_H

/* Generated by flatcc 0.5.1-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef SUMMARY_READER_H
#include "Summary_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

static const flatbuffers_voffset_t __Test_Summary_required[] = { 0 };
__flatbuffers_build_table(flatbuffers_, Test_Summary, 28)
#define __Test_Summary_formal_args ,\
  double v0, double v1, double v2, double v3,\
  double v4, double v5, double v6, double v7,\
  double v8, double v9, double v10, double v11,\
  double v12, double v13, double v14, double v15,\
  double v16, double v17, double v18, double v19,\
  double v20, double v21, double v22, double v23,\
  double v24, double v25, double v26, double v27
#define __Test_Summary_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11,\
  v12, v13, v14, v15,\
  v16, v17, v18, v19,\
  v20, v21, v22, v23,\
  v24, v25, v26, v27
static inline Test_Summary_ref_t Test_Summary_create(flatbuffers_builder_t *B __Test_Summary_formal_args);

__flatbuffers_build_scalar_field(0, flatbuffers_, Test_Summary_Rms, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(1, flatbuffers_, Test_Summary_Kurtosis, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(2, flatbuffers_, Test_Summary_Skewness, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(3, flatbuffers_, Test_Summary_Variance, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(4, flatbuffers_, Test_Summary_Mean, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(5, flatbuffers_, Test_Summary_min, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(6, flatbuffers_, Test_Summary_max, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(7, flatbuffers_, Test_Summary_count, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(8, flatbuffers_, Test_Summary_sumOfSquare, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(9, flatbuffers_, Test_Summary_Percentile_2, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(10, flatbuffers_, Test_Summary_Percentile_5, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(11, flatbuffers_, Test_Summary_Percentile_10, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(12, flatbuffers_, Test_Summary_Percentile_20, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(13, flatbuffers_, Test_Summary_Percentile_40, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(14, flatbuffers_, Test_Summary_Percentile_50, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(15, flatbuffers_, Test_Summary_Percentile_60, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(16, flatbuffers_, Test_Summary_Percentile_80, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(17, flatbuffers_, Test_Summary_Percentile_90, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(18, flatbuffers_, Test_Summary_Percentile_95, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(19, flatbuffers_, Test_Summary_Percentile_98, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(20, flatbuffers_, Test_Summary_Percentile_99, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(21, flatbuffers_, Test_Summary_Percentile_100, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(22, flatbuffers_, Test_Summary_Percentile_98_2, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(23, flatbuffers_, Test_Summary_Percentile_95_5, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(24, flatbuffers_, Test_Summary_Percentile_95_10, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(25, flatbuffers_, Test_Summary_Percentile_80_20, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(26, flatbuffers_, Test_Summary_Percentile_60_40, flatbuffers_double, double, 8, 8, 0.000000)
__flatbuffers_build_scalar_field(27, flatbuffers_, Test_Summary_Crest, flatbuffers_double, double, 8, 8, 0.000000)

static inline Test_Summary_ref_t Test_Summary_create(flatbuffers_builder_t *B __Test_Summary_formal_args)
{
    if (Test_Summary_start(B)
        || Test_Summary_Rms_add(B, v0)
        || Test_Summary_Kurtosis_add(B, v1)
        || Test_Summary_Skewness_add(B, v2)
        || Test_Summary_Variance_add(B, v3)
        || Test_Summary_Mean_add(B, v4)
        || Test_Summary_min_add(B, v5)
        || Test_Summary_max_add(B, v6)
        || Test_Summary_count_add(B, v7)
        || Test_Summary_sumOfSquare_add(B, v8)
        || Test_Summary_Percentile_2_add(B, v9)
        || Test_Summary_Percentile_5_add(B, v10)
        || Test_Summary_Percentile_10_add(B, v11)
        || Test_Summary_Percentile_20_add(B, v12)
        || Test_Summary_Percentile_40_add(B, v13)
        || Test_Summary_Percentile_50_add(B, v14)
        || Test_Summary_Percentile_60_add(B, v15)
        || Test_Summary_Percentile_80_add(B, v16)
        || Test_Summary_Percentile_90_add(B, v17)
        || Test_Summary_Percentile_95_add(B, v18)
        || Test_Summary_Percentile_98_add(B, v19)
        || Test_Summary_Percentile_99_add(B, v20)
        || Test_Summary_Percentile_100_add(B, v21)
        || Test_Summary_Percentile_98_2_add(B, v22)
        || Test_Summary_Percentile_95_5_add(B, v23)
        || Test_Summary_Percentile_95_10_add(B, v24)
        || Test_Summary_Percentile_80_20_add(B, v25)
        || Test_Summary_Percentile_60_40_add(B, v26)
        || Test_Summary_Crest_add(B, v27)) {
        return 0;
    }
    return Test_Summary_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, Test_Summary, Test_Summary_identifier, Test_Summary_type_identifier)

#include "flatcc/flatcc_epilogue.h"
#endif /* SUMMARY_BUILDER_H */
